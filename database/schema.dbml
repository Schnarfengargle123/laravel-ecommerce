// REGULAR TABLES

table users {
	id integer [pk, increment]
	email varchar
	email_verified_at timestamp
	password varchar
	username varchar
	remember_token varchar
	account_type enum // Guest • Standard • Admin
	registered boolean
	registration_date timestamp
	subscribed boolean
	address_id integer
	favourite_id integer
	cart_id integer
	order_id integer
	payment_method_id integer
	review_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: users.favourite_id < favourites.id
Ref: users.cart_id - carts.id
Ref: users.order_id < orders.id
Ref: users.payment_method_id < payment_methods.id
Ref: users.review_id < reviews.id

table addresses {
	id integer [pk, increment]
	user_id integer
	forename varchar
	surname varchar
	apartment varchar
	number varchar
	street varchar
	city varchar
	country varchar //enum?
	postcode varchar
	created_at timestamp
	updated_at timestamp
}

Ref: addresses.user_id < users.id
Ref: users.address_id < addresses.id

table orders {
	id integer [pk, increment]
	user_id integer
	quantity integer
	value double
    currency enum // varchar?
	date varchar
	payment_method_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: orders.user_id - users.id
Ref: orders.payment_method_id - payment_methods.id

table payment_methods {
	id integer [pk, increment]
	user_id integer
	card_id integer
	paypal_account_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: payment_methods.user_id - users.id
Ref: payment_methods.card_id < cards.id
Ref: payment_methods.paypal_account_id < paypal_accounts.id

table cards {
	id integer [pk, increment]
	payment_method_id integer
	card_holder varchar
	card_number varchar
	expiration varchar
	cvv varchar
	created_at timestamp
	updated_at timestamp
}

table paypal_accounts {
	id integer [pk, increment]
	payment_method_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: paypal_accounts.payment_method_id - payment_methods.id
Ref: cards.payment_method_id - payment_methods.id

table brands {
	id integer [pk, increment]
	title varchar
	product_line_id integer
	product_group_id integer
	product_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: brands.product_line_id < product_lines.id
Ref: brands.product_group_id < product_groups.id
Ref: brands.product_id < products.id

table product_lines {
	id integer [pk, increment]
	brand_id integer // Versace
	title varchar // Eros
	product_group_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: product_lines.brand_id - brands.id
Ref: product_lines.product_group_id < product_groups.id

// Also includes Giftsets

table product_groups {
	id integer [pk, increment]
	title varchar // Eros EdT, Eros EdP
	brand_id integer
	description varchar
	category enum
	year integer
	gender enum
	quantity integer // IF CAT giftset ELSE null
	availability boolean
	product_id integer
	product_line_id integer
	review_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: product_groups.product_id < products.id
Ref: product_groups.brand_id - brands.id
Ref: product_groups.product_line_id > product_lines.id
Ref: product_groups.review_id < reviews.id

table products {
	id integer [pk, increment]
	brand enum
	// title text
	// description varchar
	category enum
	concentration enum
	volume enum // perhaps, string?
	// year integer
	// gender enum
	price float
	quantity integer
	availability boolean
	product_images_id integer
	product_group_id integer
	product_line_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: products.product_images_id - product_images.id
Ref: products.product_line_id > product_lines.id
Ref: products.product_group_id - product_groups.id

table product_images {
	id integer [pk, increment]
	product_id integer
	image_main varchar
	image_box varchar
	image_pres varchar
	image_ad_main varchar
	image_ad_notes varchar
	image_ad_line varchar
	created_at timestamp
	updated_at timestamp
}

Ref: product_images.product_id - products.id

table promotions {
	id integer [pk, increment]
	category enum // Coupon || Sale
	title varchar
	discount integer
	valid_from timestamp
	valid_till timestamp
	active boolean
	activation_code varchar
	// product_id integer
	created_at timestamp
	updated_at timestamp
}

// We can have conditional logic,
// i.e. WHERE product.brand === "Versace"
// && product.concentration === "Eau de Toilette"

table reviews {
	id integer [pk, increment]
	user_id integer
	product_group_id integer
	date timestamp
	content varchar
	rating integer
	created_at timestamp
	updated_at timestamp
}

Ref: reviews.product_group_id - product_groups.id
Ref: reviews.user_id - users.id

table favourites {
	id integer [pk, increment]
	user_id integer
	title varchar
	// products_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: favourites.user_id - users.id
// Ref: favourites.products_id < products.id

table carts {
	id integer [pk, increment]
	user_id integer
	product_id integer
	value decimal
	created_at timestamp
	updated_at timestamp
}

Ref: carts.user_id - users.id
Ref: carts.product_id < products.id

// =============================================

// INTERMEDIARY TABLES (Many-to-Many)

table orders_products {
	id integer [pk, increment]
	order_id integer
	product_id integer
	price float
	quantity integer
	created_at timestamp
	updated_at timestamp
}

Ref: orders_products.order_id < orders.id
Ref: orders_products.product_id < products.id

table viewed_products {
	id integer [pk, increment]
	user_id integer
	product_group_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: viewed_products.user_id < users.id
Ref: viewed_products.product_group_id < product_groups.id

table favourites_products {
	id integer [pk, increment]
	favourite_id integer
	product_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: favourites_products.favourite_id < products.id
Ref: favourites_products.product_id < favourites.id

table carts_products {
	id integer [pk, increment]
	cart_id integer
	product_id integer
	quantity integer
	price decimal
	created_at timestamp
	updated_at timestamp
}

Ref: carts_products.cart_id < carts.id
Ref: carts_products.product_id < products.id

table promotions_products {
	id integer [pk, increment]
	promotion_id integer
	product_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: promotions_products.promotion_id < promotions.id
Ref: promotions_products.product_id < products.id

table orders_promotions {
	id integer [pk, increment]
	order_id integer
	promotion_id integer
	created_at timestamp
	updated_at timestamp
}

Ref: orders_promotions.order_id < orders.id
Ref: orders_promotions.promotion_id < promotions.id
